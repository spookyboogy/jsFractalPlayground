
--- ex1.html ---

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta property="og:title" content="⧋">
  <meta property="og:description" content="Fractal fun">
  <meta property="og:image" content="https://spookyboogy.neocities.org/preview.png">
  <title>⧋</title>
  <link rel="stylesheet" href="ex1.css">
  <link rel="icon" href="neocities.png" type="image/png">
</head>

<body>
  <div id="titleContainer">
    <!-- <h1>△△△</h1> -->
    <div id="subheadContainer">
      <h2 id="subhead"></h2>
      <div id="infoBox" style="display: none;"></div>


      <script>
				const s1 = " \u25B2 ";
        const baseSize = 3;
        const fullSubhead = Array.from({ length: baseSize }, (_, index) => `${s1.repeat(index + 1)}`).join('<br>');
				const subheadElement = document.getElementById("subhead");
				subheadElement.innerHTML = fullSubhead;
			</script>

    </div>
  </div>

	<div id="canvasContainer">
		<canvas id="fractalCanvas" width="600" height="600"></canvas>
		<!-- <canvas id="fractalCanvas"></canvas> -->
  </div>

  <div id="pyramidContainer"></div>

  <script src="ex1.js" type="module"></script>
</body>

</html>

--- ex1.js ---

// 
// llolearning javascript with fractals

import palettes from './colorPalettes.js';
import { logDisplaySizes } from './debugTools.js';
console.log(palettes);

const pyramidContainer = document.getElementById('pyramidContainer');
const canvas = document.getElementById('fractalCanvas');
const ctx = canvas.getContext('2d');

// not needing when dynamically resizing canvas instead
// let startX = 300; // X-coordinate of the triangle's starting point
// let startY = 300; // Y-coordinate of the triangle's starting point
// const size = 200; // Length of the triangle's sides

let iterations = 11; // Number of iterations to display
const lineWidth = .7;
const strokeColors = palettes.palette1; // Assigning palette to strokeColors
let colorIndex = 0;

// impementing configs for when multiple modes are introduced
// let config = {
//   iterations : 7, 
//   lineWidth : 0.7, 
//   strokeColors : palettes.palette1,
//   // ...
// };

async function drawFractal(x, y, size, iterations, colorIndex) {
    if (iterations === 0) {
    // Base case: Stop recursion when iterations reach 0
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x + size, y);
        ctx.lineTo(x + size / 2, y + (Math.sqrt(3) * size) / 2);
        ctx.closePath();
        ctx.strokeStyle = strokeColors[colorIndex % strokeColors.length]; 
        ctx.lineWidth = lineWidth; // 
        ctx.stroke();
  } else {
    // Recursive case: Generate three smaller triangles
		await drawFractalStep(x, y, size, iterations, colorIndex);
	}
}

async function drawFractalStep(x, y, size, iterations, colorIndex) {

    await new Promise((resolve) => setTimeout(resolve, 0.000001)); // ms delay so that it animates drawing
				
        await drawFractal(x, y, size / 2, 
                        iterations - 1, 
                        colorIndex + 1); //
        await drawFractal(x + size / 2, y, size / 2, 
                        iterations - 1, 
                        colorIndex + 2); // 
        await drawFractal(x + size / 4, y + (Math.sqrt(3) * size) / 4, size / 2, 
                        iterations - 1, 
                        colorIndex + 3); // 
}

async function updateCanvasSize() {
    
    infoBox.innerHTML = logDisplaySizes(); // this effectively also calls logDisplaySizes()
    const containerWidth = canvas.parentNode.clientWidth;
    const containerHeight = canvas.parentNode.clientHeight;
    // getting dimensions from canvas.parentNode is much more crisp than from window.inner*

    const canvasSize = Math.min(containerWidth, containerHeight);
    // Set the CSS size of the canvas to match the size of the container (this breaks things currently)
    // canvas.style.width = `${canvasSize}px`;
    // canvas.style.height = `${canvasSize}px`;
    
    // Adjust the canvas drawing buffer size to match the display size
    canvas.width = canvasSize;
    canvas.height = canvasSize;
    
    // const dpr = window.devicePixelRatio || 1;
    // canvas.width = canvasSize * dpr;
    // canvas.height = canvasSize * dpr;
    // ctx.scale(dpr, dpr);
    
    const triangleHeight = (Math.sqrt(3) * canvasSize) / 2;
    const startX = canvas.width / 2 - canvasSize / 2;
    const startY = canvas.height / 2 - triangleHeight / 2;

    await drawFractalRange(startX, startY, canvasSize, 1, iterations, colorIndex);
    // await drawFractal(startX, startY, canvasSize, iterations, colorIndex);
}

async function drawFractalRange(x, y, size, startIterations, endIterations, colorIndex) {
  for (let iterations = startIterations; iterations <= endIterations; iterations++) {
      await drawFractal(x, y, size, iterations, colorIndex);
      // introduce a delay between iterations for visualization purposes
      await new Promise(resolve => setTimeout(resolve, 100)); // milliseconds
      // set the wait time as a function of the iteration level such that
      // low level iterations have a bigger pause, so that it looks less hurried at the start
  }
}

function printPyramid(baseSize) {
  // Loop through the rows of the pyramid
  for (let row = 1; row <= baseSize; row++) {
    // Print spaces to create an indentation for each row
    let spaces = ' '.repeat(baseSize - row);
    // Print the triangles in each row
    let triangles = '*'.repeat(row * 2 - 1);
    // Combine the spaces and triangles to form the row
    let rowOutput = spaces + triangles;
    // Print the row to the console
    console.log(rowOutput); 
  }
}

updateCanvasSize(); // Initialize canvas size
window.addEventListener('resize', updateCanvasSize); // Recenter canvas on window resize
canvas.addEventListener('click', updateCanvasSize);

// canvas.addEventListener('click', (event) => {
//   const clickedX = event.clientX - canvas.getBoundingClientRect().left;
//   const clickedY = event.clientY - canvas.getBoundingClientRect().top;
//   // Call a function to draw a new fractal centered at (clickedX, clickedY)
//   drawInteractiveFractal(clickedX, clickedY, /* other parameters */);
// });

// infoBox - used for displaying canvas/display size info
const infoBox = document.getElementById("infoBox");
function toggleInfoBox() {
  // Toggle the visibility of the infoBox
  infoBox.style.display = infoBox.style.display === "none" ? "block" : "none";
  // Update the content of the infoBox with the information from logDisplaySizes()
  infoBox.innerHTML = logDisplaySizes();
}
// Add a click event listener to the subhead element to call the function
document.getElementById("subhead").addEventListener("click", toggleInfoBox);

const msg = "hellooo?";
console.log(msg);
console.log("\nHell?\n");
printPyramid(9);

--- ex1.css ---

body {
    margin: 0;
    padding: 0;
    background-color: #1f1f1f;
    /* overflow: hidden; */
    /* width: 100%;
    height: 100%; */
    color: #ffffff;
    font-family: Arial, sans-serif;
  }

  #titleContainer {
    background-color: #1f1f1f;
    text-align: center;
    padding: 0px;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  
  #subheadContainer {
    display: flex;
    background-color: #1f1f1f;
    align-items: flex-start; /* Align items at the start of the flex container */
  }

  #infoBox {
    background-color: #1f1f1f;
    color: #35a700;
    padding: 0px;
    margin-top: 0px;
  }
  
  #subhead {
    flex-grow: 1; /* Allow the subhead to grow and fill the available space */
  }

  #canvasContainer {
    width: 100%;
    height: 100%;
    /* Remove padding and border if any */
  }

  #fractalCanvas {
    /* background-color: #000000; */
    /* display: block; */
    width: 100%;
    height: 100%;
  }
  
